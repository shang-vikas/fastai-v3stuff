#! /bin/bash -i


if [ "$EUID" -ne 0 ];then
	echo "Please run with root privileges"
	exit
fi


comm=$(cat ~/.bashrc|grep GC-stuff)
if [ "$comm" = ""];then
	cat ./commands >> ~/.bashrc
	source ~/.bashrc
else
	:
fi

# Expand aliases defined in the shell ~/.bashrc
shopt -s expand_aliases


GREEN='\033[0;32m'
NC='\033[0m' # No Color
YELLOW="\e[93m"
# variables
script=""
script1=./starter-1.sh
script2=./starter-2.sh
externaldisk=""
disksize=""
attachdisk=""
snapnm="snap-32"

## helper functions
function createdisk {
	echo -e "$GREEN Type in the name of disk $NC"
	read externaldisk
	echo -e "Type in the size of disk in GB, recommended=200. Note you can always increase the size later."
	read disksize
	echo -e "$GREEN Creating a new external disk.. $NC"
	gcloud compute disks create $externaldisk --size $disksize --zone $zoneid
}

function check_package {
	var=$(which $1)
	if [ "$var" != "" ];then
		return 0
	else
		return 1
	fi
}

function cElement {
	  local e match="$1"
	    shift
	      for e; do [[ "$e" == "$match" ]] && return 0; done
	        return 1
}
lst=('yes' 'Yes' 'YES' 'No' 'no' 'NO')
function authenticate {
	while true;do
		echo -ne "$GREEN Do you want to authenticate your GCP account? This is for first timers or those who mess up their configuration file..\n >>>>(yes/no) $NC"
		read response
		cElement $response ${lst[@]:0:3}
		cyes=$?
		cElement $response ${lst[@]:3}
		cno=$?
		if [ "$cyes" = "0" ] ;then
			echo -e "$GREEN Now please authenticate your GCP user account and choose reinitialize default config ,then choose us-west1-b(11 number) in region when asked $NC"
			echo -e "$GREEN Hit enter to continue..... $NC"
			read tmp
			gcloud init
			break
		elif [ "$cno" = "0" ];then
			break
		fi
	done
}

function removesnap {
	gcloud compute snapshots delete $snapnm
}

function makeimage {
	gcloud compute config-ssh
	imagenm="fastai-v3-$RANDOM"
	echo -e "$GREEN""creating the custom-image from disk for future $NC"
	echo -e "$YELLOW""NOTE:$NC The whole process might take 10-15 minutes.Meanwhile don't close this window.\nYou can ssh into instance by GSSH jupyter@${details[0]}"
	gcloud compute disks snapshot ${details[0]} --snapshot-names="$snapnm"
	gcloud compute images create $imagenm --source-snapshot="$snapnm"
	if [ "$?" = "0" ];then
		echo -e "Image creation done.\n"
	else
		echo "Error creating the image."
	fi
}

function tossh {
	GSSH "jupyter@${details[0]}"
}

function difftimestamp {
	t1=$(date "+%s" --date="$1") #attach time
	t2=$(date "+%s" --date="$2") #detach time
	diff=$(( $t1 - $t2 ))
	if [[ $diff -gt 0 ]];then #attached
		echo "1"
	else
		echo "0"
	fi
}


function makeinstance {
	imagel=$(gcloud compute images list|grep fastai|awk '{print $1}')
	if [ "$imagel" = "" ]; then
		echo -e "$GREEN no custom-saved-image found, will pull the marketplace image.This will take some time. $NC"
		## create new image from marketplace
		imgfam="--image-family=pytorch-1-0-cu92-experimental"
		imgpj="deeplearning-platform-release"
		getgpu "$imgfam" "$imgpj" 1
		makeimage
		# tossh

	else
		echo -e "$GREEN saved-image found. using $imagel as boot image... $NC"
		imgfam="--image=$imagel"
		imgpj=$(gcloud config list 2>/dev/null|grep project|awk '{print $NF}')
		getgpu "$imgfam" $imgpj 0
		# tossh
	fi
}

function readinput {
	read -a details
	if [ "${#details[@]}" = "0" ];then
		# echo no args were there
		details[0]="my-fastai-gpu-$(echo $RANDOM|cut -c 1-3)"
		details[1]="8"
		details[2]="16"
		details[3]="k80"
		details[4]="1"
	fi
}

function getgpu {
	# echo attahdisk is $attachdisk
	if [ "$attachdisk" = "0" ];then
		extargs=""
	else
		extargs=" --metadata-from-file=startup-script="$script" --disk=name=$externaldisk,device-name=$externaldisk,mode=rw,boot=no"
	fi

	if [ "$3" = "1" ];then
		nvdargs=' --metadata=install-nvidia-driver=True'
	else
		nvdargs=""
	fi

	# echo argss are $extargs $nvdargs
	# echo ${details[@]}
	gcloud beta compute --project=$projectid instances create ${details[0]} --zone=$zoneid --machine-type=custom-${details[1]}-$((${details[2]}*1024)) --subnet=default --network-tier=PREMIUM  --no-restart-on-failure --maintenance-policy=TERMINATE --preemptible --service-account=$accountid --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --accelerator=type=nvidia-tesla-${details[3]},count=${details[4]} --tags=http-server,https-server $1 --image-project=$2 --boot-disk-size=60GB --boot-disk-type=pd-standard --boot-disk-device-name=${details[0]} $extargs $nvdargs


}

## script start from here

echo -e "$GREEN This process will setup the preemptible gpu instance with the necessary fastai v1 library and pytorch 1.0dev.......... $NC"

echo -e "$GREEN Checking pip3 and gcloud..... $NC"
tmp=$(check_package pip3)
if [ "$tmp" = "1" ]; then
	apt install python3-pip --yes
fi
tmp=$(check_package gcloud)
if [ "$tmp" = "1" ]; then
	pip3 install gcloud --user
fi

authenticate

zoneid=$(gcloud config list 2>/dev/null|grep zone|awk 'NF>1{print $NF}')
projectid=$(gcloud config list 2>/dev/null|grep project|awk 'NF>1{print $NF}')

insdisks=($(GINSL | grep -v NAME|awk '{print $1;}'|tr "\n" " "))
# echo ${insdisks[@]}
disks=($(gcloud compute disks list|grep -v NAME|awk '{print $1;}'))
for i in "${insdisks[@]}";do
	disks=(${disks[@]//*$i*})
done

diskcnt=${#disks[@]}
echo -e "$GREEN $(($diskcnt)) disks found $NC"



if [ $diskcnt -ne 0 ]; then
	echo -e "$GREEN Choose from existing disks or enter 0 to create new one or enter -1 to skip attaching external disk. $NC"
	printf "$(echo ${disks[@]}|tr " " "\n"|awk '{print"[" NR "]" ":" $0 "\\n"}')"
	while true;do
		read labelno
		if [ "$labelno" = "" ] || [ $labelno -lt -1 ];then
			:
		elif [ $labelno -gt $diskcnt ];then
			echo -e "$GREEN wrong number chosen.exiting..\n enter again $NC"
		elif [ $labelno -eq 0 ];then
			createdisk
			script=$script2
			break
		elif [ $labelno -eq -1 ];then
			attachdisk=0
			break
		else
			externaldisk=${disks[($labelno - 1)]}
			# echo $externaldisk
			grepd="$(gcloud compute disks describe $externaldisk|egrep '*tachTimestamp*|instances')"
			timestamps=($(printf "$grepd"|egrep "*Timestamp*"|awk 'NF>1{print substr($NF,2,length($NF)-12)}'))
			# printf "$grepd"
			# echo ${timestamps[@]}
			# read
			if [ "${#timestamps[@]}" = "1" ]; then #detach the disk
				ains=$(printf "$grepd"|egrep instances|tr "/" "\n"|tail -n 1)
				echo -e "The disk is attached to $ains. Enter 0 to detach or 1 go back to previous menu."
				read resp
				if [ "$resp" = "0" ];then
					gcloud compute instances detach-disk $ains --disk $externaldisk
					script=$script1
					break
				else
					echo -e "$GREEN choose from above options $NC"
				fi
			else
				tmpvar=$(difftimestamp ${timestamps[0]} ${timestamps[1]})
				# echo this is retur statment $tmpvar
				if [ "$tmpvar" = "0" ]; then #detached state
					script=$script1
					break
				else
					ains=$(printf "$grepd"|egrep instances|tr "/" "\n"|tail -n 1)
					echo -e "The disk is attached to $ains.... Enter 0 to detach or 1 to select other disk"
					read resp
					if [ "$resp" = "0" ];then
						ains=$(printf "$grepd"|egrep instances|tr "/" "\n"|tail -n 1)
						gcloud compute instances detach-disk $ains --disk $externaldisk
						script=$script1
						break
					else
						echo -e "$GREEN choose from above options $NC"
					fi
				fi
			fi
		fi
	done
else
	createdisk
	script=$script2
fi


echo -e $GREEN using defaults for zone= $zoneid and project= $projectid $NC
#time to create gpu_instance preemptible
accountid=$(gcloud iam service-accounts list |grep "Compute Engine"|awk 'NF>1{print $NF}')
printf "$GREEN Type instance_name, cores, ram(GB), type-of-gpu(k80,p100,v100), count(1,2,4) or Enter to use defaults \nexample:gpu-ins 4 16 k80 1 \nDefaults: my-fastai-gpu 8 16 K80 1 $NC"

readinput

echo -e "$GREEN Sit back and relax, This may take a while.. You can monitor the progress on Google cloud console $NC"

makeinstance
